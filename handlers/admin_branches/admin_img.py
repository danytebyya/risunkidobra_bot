import os
import re
import shutil

import config

from aiogram import Router, F, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.utils import safe_call_answer
from utils.image_processing import add_number_overlay
from handlers.core.admin import START_TEXT, get_admin_menu_kb


router = Router()


class AdminImgStates(StatesGroup):
    images_menu = State()
    images_category = State()
    images_browsing = State()
    images_wait_numbers = State()
    images_confirm_delete = State()
    images_wait_upload = State()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∞–º–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "admin_images")
async def admin_images_menu(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ."""
    await safe_call_answer(call)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_images_add"),
        InlineKeyboardButton(text="- –£–¥–∞–ª–∏—Ç—å", callback_data="admin_images_delete")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
    ])
    await call.message.edit_text(text="‚öôÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:", reply_markup=kb)
    await state.set_state(AdminImgStates.images_menu)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(AdminImgStates.images_menu, F.data == "admin_images_add")
async def admin_images_add(call: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await safe_call_answer(call)
    keyboard = [[InlineKeyboardButton(text=cat, callback_data=f"img_add_{cat}")] for cat in config.Image_Categories.keys()]
    keyboard.append([InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")])
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await call.message.edit_text(text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(AdminImgStates.images_category)
    await state.set_state(AdminImgStates.images_category)


@router.callback_query(AdminImgStates.images_category, F.data.startswith("img_add_"))
async def admin_images_ready_upload(call: CallbackQuery, state: FSMContext):
    """–ì–æ—Ç–æ–≤–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∂–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤."""
    await safe_call_answer(call)
    await call.message.delete()

    cat = call.data.split("img_add_")[1]
    folder = config.Image_Categories[cat]

    nums = [
        int(re.match(r"(\d+)", f).group(1))
        for f in os.listdir(folder)
        if re.match(r"^\d+", f)
    ]
    next_idx = max(nums) + 1 if nums else 1

    await state.update_data(
        img_folder=folder,
        start_index=next_idx,
        next_index=next_idx,
        pending_files=[]
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å", callback_data="done_upload")],
        [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")]
    ])
    await call.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–ª—å–±–æ–º, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)."
        '\n\nüëá –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"!',
        reply_markup=kb
    )
    await state.set_state(AdminImgStates.images_wait_upload)


@router.message(AdminImgStates.images_wait_upload)
async def admin_images_collect(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    data = await state.get_data()
    pending = data.get("pending_files", [])

    if message.photo:
        file = message.photo[-1]
        pending.append({
            "type": "photo",
            "file_id": file.file_id
        })

    elif message.document and message.document.mime_type.startswith("image/"):
        pending.append({
            "type": "document",
            "file_id": message.document.file_id,
            "file_name": message.document.file_name
        })

    else:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ-—Ñ–∞–π–ª.")

    await state.update_data(pending_files=pending)


@router.callback_query(AdminImgStates.images_wait_upload, F.data == "done_upload")
async def finish_upload(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏."""
    await safe_call_answer(call)
    data = await state.get_data()

    folder = data["img_folder"]
    idx = data["next_index"]
    pending = data.get("pending_files", [])

    general_folder = config.Image_Categories["–û–±—â–µ–µ"]
    nums = [
        int(re.match(r"(\d+)", f).group(1))
        for f in os.listdir(general_folder)
        if re.match(r"^\d+", f)
    ]
    general_idx = max(nums) + 1 if nums else 1

    for item in pending:
        tg_file = await call.bot.get_file(item["file_id"])
        if item["type"] == "photo":
            ext = ".jpg"
        else:
            ext = os.path.splitext(item["file_name"])[1] or ".png"

        fn = f"{idx}{ext}"
        dest = os.path.join(folder, fn)
        await call.bot.download_file(tg_file.file_path, destination=dest)

        if os.path.abspath(folder) != os.path.abspath(general_folder):
            fn_all = f"{general_idx}{ext}"
            dest_all = os.path.join(general_folder, fn_all)
            shutil.copy(dest, dest_all)
            general_idx += 1

        idx += 1

    count = len(pending)
    await state.clear()
    await call.message.delete()
    if count == 0:
        await call.message.answer("‚ùå –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    else:
        await call.message.answer(f"üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤.")

    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(AdminImgStates.images_menu, F.data == "admin_images_delete")
async def admin_images_delete(call: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await safe_call_answer(call)
    await call.message.delete()
    keyboard = [[InlineKeyboardButton(text=cat, callback_data=f"img_cat_{cat}")]
                for cat in config.Image_Categories.keys()]
    keyboard.append([InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")])
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await call.message.answer(text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await state.set_state(AdminImgStates.images_category)


@router.callback_query(AdminImgStates.images_category, F.data.startswith("img_cat_"))
async def admin_images_select_category(call: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    await safe_call_answer(call)
    await call.message.delete()
    cat = call.data.split("img_cat_")[1]
    folder = config.Image_Categories.get(cat)
    files = []
    for f in os.listdir(folder):
        if f.lower().endswith((".jpg",".png")):
            m = re.match(r"(\d+)", os.path.splitext(f)[0])
            if m:
                files.append((int(m.group(1)), f))
    files.sort(key=lambda x: x[0])
    filenames = [f for _, f in files]
    next_idx = files[-1][0] + 1 if files else 1
    await state.update_data(img_folder=folder, img_files=filenames, next_index=next_idx)
    await show_admin_images(call, state, page=0)


async def show_admin_images(call: CallbackQuery, state: FSMContext, page: int, loading_msg=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–≤–æ–¥–æ–º –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    files = data['img_files']; folder = data['img_folder']
    total = len(files); max_page = (total - 1) // 10 if total else 0
    page = page % (max_page + 1 if total else 1)
    start, end = page * 10, min((page + 1) * 10, total)

    for mid in data.get('prev_msgs', []):
        try:
            await call.bot.delete_message(call.message.chat.id, mid)
        except:
            pass

    if loading_msg:
        await call.bot.delete_message(call.message.chat.id, loading_msg.message_id)

    loading = await call.message.answer("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏...")

    media = []
    for idx, fname in enumerate(files[start:end], start):
        src = os.path.join(folder, fname)
        tmp = os.path.join(config.Output_Folder, f"adm_img_{idx}_{fname}")
        add_number_overlay(str(src), str(tmp), number=idx + 1)
        media.append(InputMediaPhoto(media=FSInputFile(tmp)))
    msgs = await call.message.answer_media_group(media)
    await call.bot.delete_message(call.message.chat.id, loading.message_id)

    mids = [m.message_id for m in msgs]
    nav = [
        InlineKeyboardButton(text="‚Üê", callback_data=f"img_prev_{page - 1}"),
        InlineKeyboardButton(text=f"{page + 1}/{max_page + 1}" if total else "0/0", callback_data="noop"),
        InlineKeyboardButton(text="‚Üí", callback_data=f"img_next_{page + 1}")
    ]
    keyboard = [
        nav,
        [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    prompt = await call.message.answer(
        text="üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=kb
    )
    await state.update_data(prev_msgs=mids + [prompt.message_id])
    await state.set_state(AdminImgStates.images_wait_numbers)


@router.callback_query(F.data.startswith("img_prev_") | F.data.startswith("img_next_"))
async def admin_images_page(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    await safe_call_answer(call)
    page = int(call.data.split("_")[-1])
    await show_admin_images(call, state, page)


@router.message(AdminImgStates.images_wait_numbers)
async def handle_delete_numbers(message: Message, state: FSMContext):
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    await message.delete()
    for mid in data.get('prev_msgs', []):
        try:
            await message.bot.delete_message(message.chat.id, mid)
        except:
            pass

    text = message.text or ''
    nums = [n.strip() for n in text.split(',') if n.strip()]
    if not nums or not all(n.isdigit() for n in nums):
        return await message.answer(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ {len(data['img_files'])} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
        )
    indices = sorted({int(n) - 1 for n in nums})
    if not all(0 <= i < len(data['img_files']) for i in indices):
        return await message.answer(
            f"‚ùå –ù–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(data['img_files'])}."
        )
    await state.update_data(delete_indices=indices)

    media = [
        InputMediaPhoto(media=FSInputFile(
            os.path.join(str(data['img_folder']), str(data['img_files'][i]))
        ))
        for i in indices
    ]
    msgs = await message.answer_media_group(media)
    prev_ids = [m.message_id for m in msgs]

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_photos"),
        InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="admin_images_delete"),
    ]])
    prompt_msg = await message.answer(
        text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
        reply_markup=kb
    )
    prev_ids.append(prompt_msg.message_id)
    await state.update_data(prev_ids=prev_ids)
    await state.set_state(AdminImgStates.images_confirm_delete)


@router.callback_query(AdminImgStates.images_confirm_delete, F.data == "admin_images_delete")
async def cancel_delete(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await safe_call_answer(call)
    data = await state.get_data()
    for mid in data.get('prev_ids', []):
        try:
            await call.bot.delete_message(call.message.chat.id, mid)
        except:
            pass
    await show_admin_images(call, state, page=0)


@router.callback_query(AdminImgStates.images_confirm_delete, F.data == "confirm_delete_photos")
async def admin_images_do_delete(call: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
    await safe_call_answer(call)
    data = await state.get_data()
    for mid in data.get('prev_ids', []):
        try:
            await call.bot.delete_message(call.message.chat.id, mid)
        except:
            pass

    try:
        await call.message.delete()
    except TelegramBadRequest:
        pass

    folder = data['img_folder']
    files = data['img_files']
    indices = data['delete_indices']
    for idx in sorted(indices, reverse=True):
        path = os.path.join(folder, files[idx])
        try:
            os.remove(path)
        except OSError:
            pass
        del files[idx]

    deleted_count = len(indices)
    await state.clear()
    await call.message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–æ—Ç–æ.")
    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "go_back_admin_img")
async def go_back_admin_img(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –≤ —Å—Ç—ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    await safe_call_answer(call)
    current = await state.get_state()

    if current == AdminImgStates.images_wait_numbers.state:
        data = await state.get_data()
        chat_id = call.message.chat.id
        for mid in data.get("prev_msgs", []):
            try:
                await call.bot.delete_message(chat_id, mid)
            except TelegramBadRequest:
                pass
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        keyboard = [
            [InlineKeyboardButton(text=cat, callback_data=f"img_cat_{cat}")]
            for cat in config.Image_Categories.keys()
        ]
        keyboard.append([
            InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")
        ])
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await call.message.answer(text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        await state.set_state(AdminImgStates.images_category)
        return

    if current == AdminImgStates.images_wait_upload.state:
        await state.clear()
        keyboard = [
            [InlineKeyboardButton(text=cat, callback_data=f"img_add_{cat}")]
            for cat in config.Image_Categories.keys()
        ]
        keyboard.append([
            InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_img")
        ])
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        await call.message.answer(text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
        await state.set_state(AdminImgStates.images_category)
        return

    if current == AdminImgStates.images_category.state:
        await call.message.delete()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_images_add"),
            InlineKeyboardButton(text="- –£–¥–∞–ª–∏—Ç—å", callback_data="admin_images_delete")],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
        ])
        await call.message.answer(text="‚öôÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:", reply_markup=kb)
        await state.set_state(AdminImgStates.images_menu)
        return

    await call.message.delete()
    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def register_admin_img(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä."""
    dp.include_router(router)
