import os
from pathlib import Path
from PIL import Image
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, FSInputFile
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.utils import safe_call_answer
from utils.database.db import add_color, list_colors, delete_color
from handlers.core.admin import START_TEXT, get_admin_menu_kb


router = Router()


class AdminColorsStates(StatesGroup):
    menu = State()
    wait_hex = State()
    wait_name = State()
    confirm_add = State()
    browsing = State()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "admin_colors")
async def admin_colors_menu(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)."""
    await safe_call_answer(call)
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å", callback_data="colors_add"),
         InlineKeyboardButton(text="- –£–¥–∞–ª–∏—Ç—å", callback_data="colors_delete")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
    ])
    await call.message.edit_text("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏:", reply_markup=kb)
    await state.set_state(AdminColorsStates.menu)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(AdminColorsStates.menu, F.data == "colors_add")
async def colors_add_start(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ hex-–∫–æ–¥–∞ —Ü–≤–µ—Ç–∞."""
    await safe_call_answer(call)
    prompt = await call.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ hex-–∫–æ–¥ —Ü–≤–µ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: #RRGGBB).\n\n"
        "–¶–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ <a href=\"https://colorscheme.ru/html-colors.html\">—Å–∞–π—Ç–µ</a>.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_colors")]
        ])
    )
    await state.update_data(prompt_message_id=prompt.message_id)
    await state.set_state(AdminColorsStates.wait_hex)


@router.message(AdminColorsStates.wait_hex)
async def colors_receive_hex(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π hex-–∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞."""
    hex_code = message.text.strip()
    if not (hex_code.startswith('#') and len(hex_code) == 7):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –≤ –≤–∏–¥–µ #RRGGBB.")

    existing = await list_colors()
    if any(item['hex'].lower() == hex_code.lower() for item in existing):
        data = await state.get_data()
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['prompt_message_id'],
            text=f"‚ùå Hex-–∫–æ–¥ `{hex_code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π hex:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_colors")]
            ])
        )
        await message.delete()
        return

    await state.update_data(hex=hex_code)
    await message.delete()
    data = await state.get_data()
    chat_id = message.chat.id
    prompt_id = data['prompt_message_id']
    await message.bot.edit_message_text(
        "üì§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞:",
        chat_id=chat_id, message_id=prompt_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_colors")]
        ])
    )
    await state.set_state(AdminColorsStates.wait_name)


@router.message(AdminColorsStates.wait_name)
async def colors_receive_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏–ª–∏ –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞."""
    name = message.text.strip()
    existing = await list_colors()
    if any(item['name'].lower() == name.lower() for item in existing):
        try:
            await message.delete()
        except TelegramBadRequest:
            pass

        data = await state.get_data()
        prompt_id = data.get('prompt_message_id')
        if prompt_id:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=prompt_id,
                text=f'‚ùå –¶–≤–µ—Ç "{name}" —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back_admin_colors')]
                ])
            )
        return await state.set_state(AdminColorsStates.wait_name)
    await state.update_data(name=name)
    await message.delete()
    data = await state.get_data()
    tmp_dir = Path('/tmp/color_samples')
    tmp_dir.mkdir(exist_ok=True, parents=True)
    preview = tmp_dir / f"{name}.jpg"
    Image.new('RGB', (442,442), data['hex']).save(preview)
    media = InputMediaPhoto(media=FSInputFile(str(preview)),caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}')
    await message.bot.edit_message_media(
        media=media,
        chat_id=message.chat.id,
        message_id=data['prompt_message_id'],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='+ –î–æ–±–∞–≤–∏—Ç—å', callback_data='colors_confirm_add'),
                InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back_admin_colors')
            ]
        ])
    )
    await state.update_data(preview_tmp=str(preview))
    await state.set_state(AdminColorsStates.confirm_add)


@router.callback_query(AdminColorsStates.confirm_add, F.data == 'colors_confirm_add')
async def colors_confirm_add(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–µ–≤—å—é."""
    await safe_call_answer(call)
    data = await state.get_data()
    dest = Path('resources/color_samples')
    dest.mkdir(exist_ok=True, parents=True)
    dest_path = dest / f"{data['name']}.jpg"
    os.replace(data['preview_tmp'], dest_path)
    try:
        await add_color(data['name'], data['hex'], str(dest_path))
    except Exception as e:
        if 'UNIQUE constraint' in str(e):
            await call.message.edit_text(
                '‚ùå –¶–≤–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥',callback_data='go_back_admin_colors')]])
            )
            await state.update_data(prompt_message_id=call.message.message_id)
            return await state.set_state(AdminColorsStates.wait_name)
        await call.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞.')
        return
    await state.clear()
    try:
        await call.message.delete()
    except TelegramBadRequest:
        pass
    await call.message.answer(f"üéâ –¶–≤–µ—Ç '{data['name']}' ({data['hex']}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(AdminColorsStates.menu, F.data == "colors_delete")
async def colors_delete_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü."""
    await safe_call_answer(call)
    try: await call.message.delete()
    except TelegramBadRequest: pass
    loading = await call.message.answer("üé® –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞...")
    colors = await list_colors()
    if not colors:
        await loading.delete()
        return await call.answer("‚ùå –ù–µ—Ç —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    await state.update_data(index=0)
    await _show_color_for_delete(call, state)
    await loading.delete()
    await state.set_state(AdminColorsStates.browsing)


async def _show_color_for_delete(call: CallbackQuery, state: FSMContext, edit=False):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    colors = await list_colors()
    idx = data['index'] % len(colors)
    item = colors[idx]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Üê', callback_data='colors_prev'),
         InlineKeyboardButton(text=f"{idx+1}/{len(colors)}", callback_data='noop'),
         InlineKeyboardButton(text='‚Üí', callback_data='colors_next')],
        [InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f"colors_do_delete_{item['id']}" )],
        [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back_admin_colors')]
    ])
    media = InputMediaPhoto(media=FSInputFile(item['sample_path']), caption=f"–¶–≤–µ—Ç: {item['name']} {item['hex']}")
    try:
        if edit:
            await call.message.edit_media(media=media, reply_markup=kb)
        else:
            await call.message.answer_photo(photo=FSInputFile(item['sample_path']), caption=f"–¶–≤–µ—Ç: {item['name']} {item['hex']}", reply_markup=kb)
    except TelegramBadRequest:
        await call.message.answer_photo(photo=FSInputFile(item['sample_path']), caption=f"–¶–≤–µ—Ç: {item['name']} {item['hex']}", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == 'colors_prev')
async def colors_prev(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ü–≤–µ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    idx = (data['index'] - 1) % len(await list_colors())
    await state.update_data(index=idx)
    await _show_color_for_delete(call, state, edit=True)


@router.callback_query(F.data == 'colors_next')
async def colors_next(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–≤–µ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    idx = (data['index'] + 1) % len(await list_colors())
    await state.update_data(index=idx)
    await _show_color_for_delete(call, state, edit=True)


@router.callback_query(F.data.startswith('colors_do_delete_'))
async def colors_do_delete(call: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    await safe_call_answer(call)
    color_id = int(call.data.split('_')[-1])
    all_colors = await list_colors()
    pos = next((i + 1 for i, c in enumerate(all_colors) if c['id'] == color_id), None)
    pos_display = f"{pos}" if pos is not None else f"{color_id}"

    paths = await delete_color(color_id)
    if not paths:
        paths_list = []
    elif isinstance(paths, str):
        paths_list = [paths]
    else:
        paths_list = list(paths)

    project_root = Path(__file__).resolve().parent.parent.parent
    deleted, failed = [], []
    for rel in paths_list:
        p = Path(rel)
        if not p.is_absolute():
            p = project_root / rel
        try:
            if p.is_file():
                p.unlink()
                deleted.append(str(p))
            else:
                failed.append(str(p))
        except (OSError, PermissionError):
            failed.append(str(p))

    await state.clear()
    try:
        await call.message.delete()
    except TelegramBadRequest:
        pass
    if deleted:
        await call.message.answer(f"üóëÔ∏è –¶–≤–µ—Ç #{pos_display} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await call.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ #{color_id}.")
    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "go_back_admin_colors")
async def go_back_admin_colors(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é "–Ω–∞–∑–∞–¥" –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM.
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.
    """
    await safe_call_answer(call)
    current = await state.get_state()

    if current == AdminColorsStates.confirm_add.state:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        prompt = await call.message.answer(
            "üì§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_colors")]
            ])
        )
        await state.update_data(prompt_message_id=prompt.message_id)
        await state.set_state(AdminColorsStates.wait_name)
        return

    if current == AdminColorsStates.wait_name.state:
        await call.message.edit_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ hex-–∫–æ–¥ —Ü–≤–µ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: #RRGGBB).\n\n"
            "–¶–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ <a href=\"https://colorscheme.ru/html-colors.html\">—Å–∞–π—Ç–µ</a>.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_admin_colors")]
            ])
        )
        await state.set_state(AdminColorsStates.wait_hex)
        return

    if current in (
        AdminColorsStates.wait_hex.state,
        AdminColorsStates.menu.state,
        AdminColorsStates.browsing.state
    ):
        try: await call.message.delete()
        except TelegramBadRequest: pass
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å", callback_data="colors_add"),
             InlineKeyboardButton(text="- –£–¥–∞–ª–∏—Ç—å", callback_data="colors_delete")],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
        ])
        await call.message.answer("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏:", reply_markup=kb)
        await state.set_state(AdminColorsStates.menu)
        return

    await state.clear()
    try: await call.message.delete()
    except TelegramBadRequest: pass
    await call.message.answer(START_TEXT, reply_markup=get_admin_menu_kb())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def register_admin_colors(dp):
    dp.include_router(router)
