import os
import random

from aiogram import Router, Dispatcher, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, FSInputFile, Message
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from PIL import Image

import config

from config import logger
from utils.database.db import list_fonts, list_colors
from utils.image_processing import add_watermark, add_text_to_image, add_number_overlay
from utils.payments.payment_functional import create_payment, check_payment_status
from utils.utils import safe_edit_text, safe_edit_media, push_state, validate_text, safe_call_answer
from handlers.core.start import START_TEXT, get_main_menu_kb
from handlers.core.subscription import is_subscribed


router = Router()


class ImageMaker(StatesGroup):
    choosing_category = State()
    choosing_image = State()
    choosing_font = State()
    choosing_color = State()
    choosing_position = State()
    entering_text = State()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == 'create_card')
async def create_card(call: CallbackQuery, state: FSMContext, force_new_message: bool = False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    await state.clear()
    await state.update_data(state_stack=[])

    text = (
        '‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –æ—Ç–∫—Ä—ã—Ç–æ–∫!\n\n'
        '‚ô° –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –¥—É—à–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–π –æ—Ç–∫—Ä—ã—Ç–∫–µ\n'
        '‚úé –ù–∞–ø–∏—à–∏—Ç–µ —Ç—ë–ø–ª–æ–µ –ª–∏—á–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –≤ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ, –æ—Ç—Ä–∞–∂–∞—é—â–µ–º –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞\n'
        '‚úì –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–≤–æ—Ä–µ–Ω–∏–µ\n\n'
        '–ì–æ—Ç–æ–≤—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –±–ª–∏–∑–∫–∏—Ö?\n\n'
        'üëá –ù–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:'
    )

    await push_state(state, ImageMaker.choosing_category)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f'category_{name}')] for name in config.Image_Categories
    ] + [[InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_back")]])

    if force_new_message:
        await call.message.answer(text, reply_markup=keyboard)
    else:
        await safe_edit_text(call.message, text=text, reply_markup=keyboard)

    logger.info(f"User {call.from_user.id}: started image creation")
    await call.answer()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data.startswith('category_'))
async def process_category(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    category = call.data.split(sep='_', maxsplit=1)[1]
    if category not in config.Image_Categories:
        await call.answer(text='‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert=True)
        return
    await safe_call_answer(call)
    await state.update_data(selected_category=category)

    try:
        await call.message.delete()
    except TelegramBadRequest:
        pass

    logger.info(f"User {call.from_user.id}: selected category {category}")
    await choose_image(call, state)


async def choose_image(call: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await push_state(state, ImageMaker.choosing_image)
    data = await state.get_data()
    folder = config.Image_Categories[data['selected_category']]
    files = sorted(f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.png')))
    await state.update_data(image_files=files, image_folder=folder)
    await show_images_album(call, state, page=0)


async def show_images_album(call: CallbackQuery, state: FSMContext, page: int = 0):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π."""
    await safe_call_answer(call)

    user_id = call.from_user.id

    data = await state.get_data()
    old_album_msgs = data.get('last_album_msgs', [])
    keyboard_msg_id = data.get('last_keyboard_msg_id')
    for msg_id in old_album_msgs:
        try:
            await call.bot.delete_message(call.message.chat.id, msg_id)
        except TelegramBadRequest:
            pass
    if keyboard_msg_id:
        try:
            await call.bot.delete_message(call.message.chat.id, keyboard_msg_id)
        except TelegramBadRequest:
            pass

    loading_msg = await call.message.answer("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏...")
    files = data['image_files']
    total = len(files)
    image_folder = data['image_folder']
    max_page = (total - 1) // 10
    if page < 0:
        page = max_page
    elif page > max_page:
        page = 0
    start = page * 10
    end = min(start + 10, total)
    page_files = files[start:end]

    media = []
    for i, filename in enumerate(page_files):
        src = os.path.join(image_folder, filename)
        numbered_path = os.path.join(
            config.Output_Folder,
            f'scroll_numbered_{start + i + 1}_{os.path.basename(src)}'
        )
        if await is_subscribed(user_id):
            add_number_overlay(str(src), numbered_path, number=i + 1)
        else:
            wm_path = os.path.join(
                config.Output_Folder,
                f'scroll_watermarked_{os.path.basename(src)}'
            )
            add_watermark(src, wm_path, watermark_text='–°–æ–∑–¥–∞–Ω–æ –≤ –î–æ–±—Ä—ã–µ –û—Ç–∫—Ä—ã—Ç–æ—á–∫–∏<3')
            add_number_overlay(wm_path, numbered_path, number=i + 1)
        media.append(InputMediaPhoto(media=FSInputFile(numbered_path)))

    album_msgs = await loading_msg.answer_media_group(media=media)
    album_msg_ids = [msg.message_id for msg in album_msgs]

    select_buttons = [
        [InlineKeyboardButton(text=str(i+1), callback_data=f'select_image_{start+i}')
         for i in range(0, min(5, len(page_files)))],
        [InlineKeyboardButton(text=str(i+1), callback_data=f'select_image_{start+i}')
         for i in range(5, min(10, len(page_files)))]
    ]
    max_page_display = max_page + 1
    nav_buttons = [
        InlineKeyboardButton(text='‚Üê', callback_data=f'prev_page_{page-1}'),
        InlineKeyboardButton(text=f'{page+1}/{max_page_display}', callback_data='noop'),
        InlineKeyboardButton(text='‚Üí', callback_data=f'next_page_{page+1}')
    ]
    back_button = [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=select_buttons + [nav_buttons] + [back_button]
    )
    keyboard_msg = await loading_msg.answer(
        text="‚ô° –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    try:
        await loading_msg.delete()
    except TelegramBadRequest:
        pass
    await state.update_data(
        last_album_msgs=album_msg_ids,
        last_keyboard_msg_id=keyboard_msg.message_id,
        image_page=page
    )


@router.callback_query(F.data.startswith('next_page_'))
async def next_page_cb(call: CallbackQuery, state: FSMContext):
    page = int(call.data.split('_')[-1])
    await show_images_album(call, state, page)


@router.callback_query(F.data.startswith('prev_page_'))
async def prev_page_cb(call: CallbackQuery, state: FSMContext):
    page = int(call.data.split('_')[-1])
    await show_images_album(call, state, page)


@router.callback_query(F.data.startswith('select_image_'))
async def select_image_cb(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —à—Ä–∏—Ñ—Ç–∞."""
    await safe_call_answer(call)
    idx = int(call.data.split('_')[-1])
    data = await state.get_data()
    filename = data['image_files'][idx]
    await state.update_data(selected_image=filename, image_index=idx)

    old_album_msgs = data.get('last_album_msgs', [])
    keyboard_msg_id = data.get('last_keyboard_msg_id')

    for msg_id in old_album_msgs:
        try:
            await call.bot.delete_message(call.message.chat.id, msg_id)
        except TelegramBadRequest:
            pass
    if keyboard_msg_id:
        try:
            await call.bot.delete_message(call.message.chat.id, keyboard_msg_id)
        except TelegramBadRequest:
            pass

    logger.info(f"User {call.from_user.id}: selected image {filename}")
    await choose_font(call, state)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def choose_font(call: CallbackQuery, state: FSMContext, edit=False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –Ω–∏–º"""
    await push_state(state, ImageMaker.choosing_font)
    data = await state.get_data()
    fonts = await list_fonts()
    if not fonts:
        await call.answer("‚ùå –ë–∞–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –ø—É—Å—Ç–∞", show_alert=True)
        return
    idx = data.get('font_index', 0) % len(fonts)
    font = fonts[idx]
    await state.update_data(font_index=idx)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Üê', callback_data='prev_font'),
         InlineKeyboardButton(text=f'{idx+1}/{len(fonts)}', callback_data='noop'),
         InlineKeyboardButton(text='‚Üí', callback_data='next_font')],
        [InlineKeyboardButton(text='‚úì –í—ã–±—Ä–∞—Ç—å', callback_data=f'select_font_{font['id']}')],
        [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')]
    ])
    media = InputMediaPhoto(media=FSInputFile(font['sample_path']),
                            caption=f'‚úé –ü–æ–¥–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ ‚Äî '
                                    f'–ø—É—Å—Ç—å –≤–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∑–∞–∑–≤—É—á–∏—Ç –ø–æ-–æ—Å–æ–±–µ–Ω–Ω–æ–º—É')
    if edit:
        try:
            await call.message.edit_media(media=media, reply_markup=keyboard)
        except TelegramBadRequest:
            await call.message.answer_photo(photo=FSInputFile(font['sample_path']),
                                           caption=f'‚úé –ü–æ–¥–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ ‚Äî '
                                                    f'–ø—É—Å—Ç—å –≤–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∑–∞–∑–≤—É—á–∏—Ç –ø–æ-–æ—Å–æ–±–µ–Ω–Ω–æ–º—É',
                                           reply_markup=keyboard)
    else:
        await call.message.answer_photo(photo=FSInputFile(font['sample_path']),
                                        caption=f'‚úé –ü–æ–¥–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ ‚Äî '
                                                f'–ø—É—Å—Ç—å –≤–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∑–∞–∑–≤—É—á–∏—Ç –ø–æ-–æ—Å–æ–±–µ–Ω–Ω–æ–º—É',
                                        reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data == 'prev_font')
async def prev_font(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É —à—Ä–∏—Ñ—Ç–∞"""
    data = await state.get_data()
    fonts = await list_fonts()
    idx = (data.get('font_index', 0) - 1) % len(fonts)
    await state.update_data(font_index=idx)
    await choose_font(call, state, edit=True)


@router.callback_query(F.data == 'next_font')
async def next_font(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É —à—Ä–∏—Ñ—Ç–∞"""
    data = await state.get_data()
    fonts = await list_fonts()
    idx = (data.get('font_index', 0) + 1) % len(fonts)
    await state.update_data(font_index=idx)
    await choose_font(call, state, edit=True)


@router.callback_query(F.data.startswith('select_font_'))
async def select_font(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞"""
    font_id = int(call.data.split('_')[-1])
    fonts = await list_fonts()
    selected = next((f for f in fonts if f['id'] == font_id), None)
    if not selected:
        await call.answer("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await state.update_data(selected_font=selected['font_path'])
    await call.answer()
    await choose_color(call, state)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def choose_color(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —Ü–≤–µ—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –Ω–∏–º"""
    await push_state(state, ImageMaker.choosing_color)
    data = await state.get_data()
    colors = await list_colors()
    if not colors:
        await call.answer("‚ùå –ë–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞", show_alert=True)
        return
    idx = data.get('color_index', 0) % len(colors)
    color = colors[idx]
    await state.update_data(color_index=idx)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Üê', callback_data='prev_color'),
         InlineKeyboardButton(text=f'{idx+1}/{len(colors)}', callback_data='noop'),
         InlineKeyboardButton(text='‚Üí', callback_data='next_color')],
        [InlineKeyboardButton(text=f'‚úì {color['name']}', callback_data=f'select_color_{color['id']}')],
        [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')]
    ])
    media = InputMediaPhoto(media=FSInputFile(color['sample_path']),
                            caption= f"üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç ‚Äî "
                            "—á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    await safe_edit_media(call.message, media=media, reply_markup=keyboard)


@router.callback_query(F.data == 'prev_color')
async def prev_color(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–∑–µ—Ü —Ü–≤–µ—Ç–∞"""
    data = await state.get_data()
    colors = await list_colors()
    idx = (data.get('color_index', 0) - 1) % len(colors)
    await state.update_data(color_index=idx)
    await choose_color(call, state)


@router.callback_query(F.data == 'next_color')
async def next_color(call: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–∑–µ—Ü —Ü–≤–µ—Ç–∞"""
    data = await state.get_data()
    colors = await list_colors()
    idx = (data.get('color_index', 0) + 1) % len(colors)
    await state.update_data(color_index=idx)
    await choose_color(call, state)


@router.callback_query(F.data.startswith('select_color_'))
async def select_color(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    color_id = int(call.data.split('_')[-1])
    colors = await list_colors()
    selected = next((c for c in colors if c['id'] == color_id), None)
    if not selected:
        await call.answer("‚ùå –¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await state.update_data(selected_color=selected['hex'])
    try:
        await call.message.delete()
    except TelegramBadRequest:
        pass
    await call.answer()
    await choose_position(call, state)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def choose_position(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–°–≤–µ—Ä—Ö—É', callback_data='position_top'),
            InlineKeyboardButton(text='–ü–æ —Ü–µ–Ω—Ç—Ä—É', callback_data='position_center'),
            InlineKeyboardButton(text='–°–Ω–∏–∑—É', callback_data='position_bottom'),
        ],
        [ InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back') ]
    ])

    await call.message.answer(text='üëá –£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç', reply_markup=kb)
    await state.set_state(ImageMaker.choosing_position)
    await call.answer()


@router.callback_query(F.data.startswith('position_'))
async def select_position(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞"""
    pos = call.data.split('_')[-1]
    await state.update_data(selected_text_position=pos)
    logger.info(f"User {call.from_user.id}: selected position {pos}")
    try:
        await call.message.delete()
    except TelegramBadRequest:
        logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞")

    prompt = await call.message.answer('üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É:')
    await state.update_data(text_prompt_msg_id=prompt.message_id)
    await state.set_state(ImageMaker.entering_text)
    await call.answer()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.message(ImageMaker.entering_text, F.text)
async def handle_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –æ—Ç–∫—Ä—ã—Ç–∫–∏."""
    if await validate_text(message, state):
        await send_image_preview(message, state, size_correction=0)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é –æ—Ç–∫—Ä—ã—Ç–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def send_image_preview(message: Message, state: FSMContext, size_correction=0, is_resizing=False, user_id: int | None = None):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –æ—Ç–∫—Ä—ã—Ç–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º."""
    indicator_text = '‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞‚Ä¶' if is_resizing else '‚öôÔ∏è –°–æ–∑–¥–∞—ë–º –æ—Ç–∫—Ä—ã—Ç–∫—É‚Ä¶'
    indicator = await message.answer(indicator_text)

    if user_id is None:
        user_id = message.from_user.id
    data = await state.get_data()
    src = os.path.join(data['image_folder'], data['selected_image'])
    filename = f"final_{message.from_user.id}_{random.randint(1000000,99999999)}.png"
    final_path = os.path.join(config.Output_Folder, filename)

    if await is_subscribed(user_id):
        add_text_to_image(src, data['user_text'], data['selected_font'], data['selected_color'],
                          final_path, position=data['selected_text_position'], size_correction=size_correction)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –º–µ–Ω—å—à–µ', callback_data='resize_minus'),
            InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ', callback_data='resize_plus')],
            [InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
            [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')],
        ])
        await message.answer_photo(
            photo=FSInputFile(final_path),
            caption='üëÜ –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n‚ô° –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',
            reply_markup=keyboard
        )
        try:
            await indicator.delete()
        except TelegramBadRequest:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏")
        return

    add_text_to_image(src, data['user_text'], data['selected_font'], data['selected_color'],
                      final_path, position=data['selected_text_position'], size_correction=size_correction)
    preview_path = os.path.join(config.Output_Folder, f"preview_{filename}")
    add_watermark(final_path, preview_path, watermark_text='–°–æ–∑–¥–∞–Ω–æ –≤ –î–æ–±—Ä—ã–µ –û—Ç–∫—Ä—ã—Ç–æ—á–∫–∏<3')

    if not is_resizing:
        url, pid = await create_payment(message.from_user.id, 100, '–û–ø–ª–∞—Ç–∞ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∫—É')
        await state.update_data(payment_url=url, payment_id=pid)

    await state.update_data(preview_path=preview_path, final_path=final_path, size_correction=size_correction)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üõí –û–ø–ª–∞—Ç–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É', url=data['payment_url'])],
        [InlineKeyboardButton(text='üíå –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É', callback_data=f'check_payment:{data['payment_id']}')],
        [InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –º–µ–Ω—å—à–µ', callback_data='resize_minus'),
         InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ', callback_data='resize_plus')],
        [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')]
    ])

    await message.answer_photo(photo=FSInputFile(preview_path), caption='üì¶ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä',
                               reply_markup=keyboard)
    try:
        await indicator.delete()
    except TelegramBadRequest:
        logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏")


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == 'resize_minus')
async def resize_minus(call: CallbackQuery, state: FSMContext):
    """–£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é (—à—Ä–∏—Ñ—Ç –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ)."""
    await call.answer()
    data = await state.get_data()

    src = os.path.join(data['image_folder'], data['selected_image'])
    image = Image.open(src)
    if image.width < 2000:
        base_font_size = 72
    else:
        base_font_size = 120

    current_correction = data.get('size_correction', 0)
    min_font_size = 52
    new_correction = current_correction - 1
    new_font_size = base_font_size + (new_correction * 20)

    if new_font_size <= min_font_size:
        await call.answer(text='‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ ‚Äî {min_font_size}', show_alert=True)
        return

    await state.update_data(size_correction=new_correction)
    try:
        await call.message.delete()
    except TelegramBadRequest:
        logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é")
    await send_image_preview(call.message, state, size_correction=new_correction, is_resizing=True, user_id=call.from_user.id)


@router.callback_query(F.data == 'resize_plus')
async def resize_plus(call: CallbackQuery, state: FSMContext):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é."""
    await call.answer()
    data = await state.get_data()
    new_correction = data.get('size_correction', 0) + 1
    await state.update_data(size_correction=new_correction)
    try:
        await call.message.delete()
    except TelegramBadRequest:
        logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é")
    await send_image_preview(call.message, state, size_correction=new_correction, is_resizing=True, user_id=call.from_user.id)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data.startswith('check_payment:'))
async def check_payment_callback(call: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
    pid = call.data.split(':', 1)[1]
    if await check_payment_status(pid) == 'succeeded':
        data = await state.get_data()
        final_path = data.get('final_path') or data.get('preview_path')
        if not final_path:
            await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        media = InputMediaPhoto(
            media=FSInputFile(final_path),
            caption='–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n‚ô° –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
        ])
        try:
            await call.message.edit_media(media=media, reply_markup=kb)
        except TelegramBadRequest as e:
            logger.error(f"Failed to edit media in check_payment: {e}")
    else:
        await call.answer(text='‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', show_alert=True)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç ¬´–ù–∞–∑–∞–¥¬ª
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == 'go_back')
async def go_back(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –≤ stack'–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    current = await state.get_state()
    if current == ImageMaker.choosing_image.state:
        data = await state.get_data()
        old_album_msgs = data.get('last_album_msgs', [])
        keyboard_msg_id = data.get('last_keyboard_msg_id')

        for msg_id in old_album_msgs:
            try:
                await call.bot.delete_message(call.message.chat.id, msg_id)
            except TelegramBadRequest:
                pass
        if keyboard_msg_id:
            try:
                await call.bot.delete_message(call.message.chat.id, keyboard_msg_id)
            except TelegramBadRequest:
                pass
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass

        await create_card(call, state, force_new_message=True)
        await state.set_state(ImageMaker.choosing_category)
    elif current == ImageMaker.choosing_font.state:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞")
        await show_images_album(call, state)
        await state.set_state(ImageMaker.choosing_image)
    elif current == ImageMaker.choosing_color.state:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞")
        await choose_font(call, state)
        await state.set_state(ImageMaker.choosing_font)
    elif current == ImageMaker.choosing_position.state:
        await choose_color(call, state)
        await state.set_state(ImageMaker.choosing_color)
    elif current == ImageMaker.entering_text.state:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–°–≤–µ—Ä—Ö—É',   callback_data='position_top'),
                InlineKeyboardButton(text='–ü–æ —Ü–µ–Ω—Ç—Ä—É', callback_data='position_center'),
                InlineKeyboardButton(text='–°–Ω–∏–∑—É',     callback_data='position_bottom')
            ],
            [InlineKeyboardButton(text='‚èé –ù–∞–∑–∞–¥', callback_data='go_back')]
        ])
        await call.message.answer(text='üëá –£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç', reply_markup=kb)
        await state.set_state(ImageMaker.choosing_position)
    elif current == ImageMaker.choosing_category.state:
        await state.clear()
        await safe_edit_text(call.message, text=START_TEXT, reply_markup=get_main_menu_kb())
    else:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await create_card(call, state, force_new_message=True)

    await call.answer()


@router.callback_query(F.data == 'main_menu')
async def main_menu(call: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã."""
    await state.set_state(None)
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
    await call.message.answer(
        START_TEXT,
        reply_markup=get_main_menu_kb()
    )
    await call.answer()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def register_generic_picture(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–∫"""
    dp.include_router(router)
