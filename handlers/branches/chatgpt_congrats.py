from aiogram import Router, F, types, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.core.start import START_TEXT, get_main_menu_kb
from handlers.core.subscription import is_subscribed
from utils.chatgpt.gpt import generate_response, generate_response_with_edits
from utils.payments.payment_functional import create_payment, check_payment_status
from utils.utils import safe_edit_text, safe_call_answer
from config import logger, SUPPORT_URL


router = Router()


class CongratsStates(StatesGroup):
    input_congrats_prompt = State()
    input_edit_prompt = State()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "congrats")
async def congrats_start(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await state.clear()
    user_id = call.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É ¬´–¢–µ–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î—Ä—É–∂–±–∞",    callback_data="congrats_type_friendship")],
        [InlineKeyboardButton(text="–õ—é–±–æ–≤—å",    callback_data="congrats_type_love")],
        [InlineKeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", callback_data="congrats_type_neutral")],
        [InlineKeyboardButton(text="–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", callback_data="congrats_type_relatives")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
    ])
    await call.message.edit_text(
        text=(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π!\n\n"
            "‚ô° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ç –¥—Ä—É–∂–±—ã –¥–æ —Å–µ–º—å–∏, "
            "–∏ –º—ã –ø—Ä–∏–¥—É–º–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.\n\n"
            "üëá –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å —ç—Ç–∏ —Ç—ë–ø–ª—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?"
        ),
        reply_markup=kb
    )
    await safe_call_answer(call)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data.startswith("congrats_type_"))
async def congrats_type(call: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ—Ç–∞–ª–∏."""
    await state.update_data(
        current_file_index=0
    )
    ru_names = {
        "friendship": "–î—Ä—É–∂–±–∞",
        "love":       "–õ—é–±–æ–≤—å",
        "neutral":    "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è",
        "relatives":  "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏"
    }
    key = call.data.split("congrats_type_")[1]
    category_ru = ru_names.get(key)
    await state.update_data(category_ru=category_ru)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_congrats")]
    ])
    msg = await call.message.edit_text(
        text=(
            "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, "
            "–∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —É—á–µ—Å—Ç—å –∏ –∫–∞–∫–∏–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å. "
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏, –∞ –º—ã –∏—Ö –≤–æ–ø–ª–æ—Ç–∏–º!"
        ),
        reply_markup=kb
    )
    await state.update_data(details_message_id=msg.message_id)
    await state.set_state(CongratsStates.input_congrats_prompt)
    await safe_call_answer(call)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.message(CongratsStates.input_congrats_prompt)
async def input_congrats_prompt(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏
    –ª–∏–±–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å),
    –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å.
    """
    text = message.text or ""
    if len(text) > 255:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.")
        return

    await state.update_data(user_prompt=text, regeneration_count=0)
    await message.delete()


    if await is_subscribed(message.from_user.id):
        data = await state.get_data()
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=data["details_message_id"],
        )
        loading = await message.answer("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ...")
        generated = await generate_response((await state.get_data())["category_ru"], text)
        await state.update_data(current_congratulation=generated)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç (0/10)", callback_data="regenerate_congrats"),
                InlineKeyboardButton(text="‚úèÔ∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (0/10)", callback_data="edit_congrats"),
            ],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")],
        ])

        sent = await message.bot.send_message(
            chat_id=message.chat.id,
            text=generated,
            reply_markup=kb
        )
        await state.update_data(details_message_id=sent.message_id)
        await message.bot.delete_message(chat_id=loading.chat.id, message_id=loading.message_id)
    else:
        url, pid = await create_payment(message.from_user.id, 50, "–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", url=url)],
            [InlineKeyboardButton(text="üì¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"check_congrats:{pid}")],
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_congrats")],
        ])

        data = await state.get_data()
        await message.bot.edit_message_text(
            text=(
                "üíå –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, "
                "–∏ –º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤–∞–º –≤ —á–∞—Ç!"
            ),
            chat_id=message.chat.id,
            message_id=data["details_message_id"],
            reply_markup=kb
        )

    await state.set_state(None)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data.startswith("check_congrats:"))
async def check_congrats_payment(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """
    pid = call.data.split(":", 1)[1]
    status = await check_payment_status(pid)
    user_id = call.from_user.id

    if status != "succeeded":
        await call.answer(text="‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)
        logger.warning(
            f"–ü–ª–∞—Ç—ë–∂ {pid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω "
            f"(—Å—Ç–∞—Ç—É—Å={status})"
        )
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (payment_id={pid})")

    await call.answer()
    chat_id = call.message.chat.id
    await call.message.delete()

    loading = await call.bot.send_message(chat_id=chat_id, text="‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ...")

    data = await state.get_data()
    await state.update_data(paid_pid=pid)

    try:
        text = await generate_response(data["category_ru"], data["user_prompt"])
    except TelegramBadRequest:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è {call.from_user.id} "
            f"(payment_id={pid})"
        )
        kb_err = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate_congrats")],
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",   url=SUPPORT_URL)],
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥",                callback_data="go_back_congrats")],
        ])
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=kb_err)
        await call.bot.delete_message(chat_id=chat_id, message_id=loading.message_id)
        await safe_call_answer(call)
        return

    await state.update_data(current_congratulation=text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç (0/5)", callback_data="regenerate_congrats"),
            InlineKeyboardButton(text="‚úèÔ∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (0/5)", callback_data="edit_congrats"),
        ],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")],
    ])
    await call.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)
    await call.bot.delete_message(chat_id=chat_id, message_id=loading.message_id)
    await safe_call_answer(call)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "regenerate_congrats")
async def regenerate_congratulation(call: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–∞–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏."""
    user_id = call.from_user.id
    max_attempts = 10 if await is_subscribed(user_id) else 5

    data = await state.get_data()
    cnt = data.get("regeneration_count", 0)
    if cnt >= max_attempts:
        await call.answer(text="‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫", show_alert=True)
        return

    cnt += 1
    await state.update_data(regeneration_count=cnt)

    category = data["category_ru"]
    base_prompt = data["user_prompt"]
    edits = data.get("edits", [])

    try:
        if edits:
            new_text = await generate_response_with_edits(
                category,
                base_prompt,
                edits
            )
        else:
            new_text = await generate_response(
                category,
                base_prompt
            )
    except TelegramBadRequest:
        kb_err = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate_congrats")],
            [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_URL)],
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_congrats")],
        ])
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=kb_err)
        await safe_call_answer(call)
        return

    await state.update_data(current_congratulation=new_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç ({cnt}/{max_attempts})", callback_data="regenerate_congrats"),
            InlineKeyboardButton(text=f"‚úèÔ∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ({cnt}/{max_attempts})", callback_data="edit_congrats"),
        ],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")],
    ])
    await call.message.edit_text(new_text, reply_markup=kb)
    await safe_call_answer(call)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "edit_congrats")
async def edit_congrats_start(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø—Ä–∞–≤–æ–∫ –∫ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—é."""
    data = await state.get_data()
    cnt = data.get("regeneration_count", 0)
    max_attempts = 10 if await is_subscribed(call.from_user.id) else 5
    if cnt >= max_attempts:
        await call.answer(text="‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫", show_alert=True)
        return

    msg = await call.message.edit_text(
        text="üñã –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_congrats")]
        ])
    )
    await state.update_data(edit_prompt_message_id=msg.message_id)
    await state.set_state(CongratsStates.input_edit_prompt)
    await safe_call_answer(call)


@router.message(CongratsStates.input_edit_prompt)
async def input_edit_prompt(message: types.Message, state: FSMContext):
    edit_text = message.text.strip()
    await message.delete()

    data = await state.get_data()
    chat_id = message.chat.id

    prompt_id = data.get("edit_prompt_message_id")
    if prompt_id:
        await message.bot.delete_message(chat_id=chat_id, message_id=prompt_id)

    loading = await message.answer("‚öôÔ∏è –í–Ω–æ—Å–∏–º –ø—Ä–∞–≤–∫–∏...")

    base_prompt = data["user_prompt"]
    edits = data.get("edits", [])
    edits.append(edit_text)
    cnt = data.get("regeneration_count", 0) + 1
    await state.update_data(edits=edits, regeneration_count=cnt)

    new_generated = await generate_response_with_edits(
        data["category_ru"],
        base_prompt,
        edits
    )
    await state.update_data(current_congratulation=new_generated)

    max_attempts = 10 if await is_subscribed(message.from_user.id) else 5
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç ({cnt}/{max_attempts})", callback_data="regenerate_congrats"),
            InlineKeyboardButton(text=f"‚úèÔ∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ({cnt}/{max_attempts})", callback_data="edit_congrats"),
        ],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")],
    ])
    await message.answer(new_generated, reply_markup=kb)
    await message.bot.delete_message(chat_id=loading.chat.id, message_id=loading.message_id)
    await state.set_state(None)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "go_back_congrats")
async def go_back(call: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è flow –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π."""
    current = await state.get_state()
    data = await state.get_data()
    details_msg_id = data.get("details_message_id")

    if current == CongratsStates.input_edit_prompt.state:
        text = data.get("current_congratulation", "")
        cnt = data.get("regeneration_count", 0)
        max_attempts = 10 if await is_subscribed(call.from_user.id) else 5
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç ({cnt}/{max_attempts})", callback_data="regenerate_congrats"),
                InlineKeyboardButton(text=f"‚úèÔ∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ({cnt}/{max_attempts})", callback_data="edit_congrats"),
            ],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")],
        ])
        await safe_edit_text(call.message, text=text, reply_markup=kb)
        await state.set_state(None)
        await safe_call_answer(call)
        return

    if current == CongratsStates.input_congrats_prompt.state:
        await congrats_start(call, state)
        return

    if not current and details_msg_id:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="go_back_congrats")],
        ])
        await safe_edit_text(
            {"bot": call.bot, "chat_id": call.message.chat.id, "message_id": details_msg_id},
            text=(
                "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, "
                "–∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —É—á–µ—Å—Ç—å –∏ –∫–∞–∫–∏–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å. "
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏, –∞ –º—ã –∏—Ö –≤–æ–ø–ª–æ—Ç–∏–º!"
            ),
            reply_markup=kb
        )
        await state.set_state(CongratsStates.input_congrats_prompt)
        await safe_call_answer(call)
        return

    await state.clear()
    await safe_edit_text(call.message, text=START_TEXT, reply_markup=get_main_menu_kb())
    await safe_call_answer(call)


@router.callback_query(F.data == "return_to_main")
async def return_to_main(call: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(START_TEXT, reply_markup=get_main_menu_kb())
    await safe_call_answer(call)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def register_congrats_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π."""
    dp.include_router(router)
