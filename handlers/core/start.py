from aiogram import Router, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart

from config import logger


router = Router()


START_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ¬´–î–æ–±—Ä—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ—á–∫–∏¬ª!\n\nüëá –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –≤–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ!"
)


def get_main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñºÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞", callback_data="create_card")],
        [InlineKeyboardButton(text="üíå –¢–µ–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="congrats")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ü–∏—Å—å–º–æ –≤ –±—É–¥—É—â–µ–µ", callback_data="future_letter")],
        [InlineKeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", callback_data="quote_of_day")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
    ])


def get_shop_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñãÔ∏è –ö—É–ø–∏—Ç—å —à—Ä–∏—Ñ—Ç", callback_data="purchase_fonts")],
        [InlineKeyboardButton(text="üñºÔ∏è –ö—É–ø–∏—Ç—å —Ñ–æ–Ω", callback_data="purchase_backgrounds")],
        [InlineKeyboardButton(text="‚èé –ù–∞–∑–∞–¥", callback_data="back_to_main_start")],
    ])


@router.callback_query(F.data == "start")
async def start_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(START_TEXT, reply_markup=get_main_menu_kb())
    await call.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç –∏ –ø–µ—Ä–µ—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(START_TEXT, reply_markup=get_main_menu_kb())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–µ—Ä–µ—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@router.callback_query(F.data == "shop")
async def shop_menu(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
        reply_markup=get_shop_menu_kb()
    )
    await call.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–∞–≥–∞–∑–∏–Ω")


@router.callback_query(F.data == "back_to_main_start")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(START_TEXT, reply_markup=get_main_menu_kb())
    await call.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")


def register_start_handlers(dp: Dispatcher):
    dp.include_router(router)
