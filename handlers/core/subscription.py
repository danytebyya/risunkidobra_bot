from datetime import datetime, timedelta
from aiogram import F, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Router
from aiogram.filters import Command

from utils.database.db import upsert_subscription, fetch_subscription
from utils.payments.payment_functional import create_payment, check_payment_status
from handlers.core.start import START_TEXT, get_main_menu_kb


router = Router()


async def activate_subscription(user_id: int, days: int) -> datetime:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ days –¥–Ω–µ–π.
    """
    now = datetime.utcnow()
    record = await fetch_subscription(user_id)
    if record and record['expires_at'] > now:
        base = record['expires_at']
    else:
        base = now
    expires = base + timedelta(days=days)
    await upsert_subscription(user_id, expires.isoformat())
    return expires


async def is_subscribed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    record = await fetch_subscription(user_id)
    return bool(record and record['expires_at'] > datetime.utcnow())


@router.message(Command(commands=["subscribe", "subscription"]))
async def show_subscription_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –¥–∞—Ç—É –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.
    """
    user_id = message.from_user.id

    if await is_subscribed(user_id):
        record = await fetch_subscription(user_id)
        expires: datetime = record['expires_at']
        formatted = expires.strftime("%d.%m.%Y")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_sub")]
        ])
        await message.answer(
            f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {formatted}.",
            reply_markup=kb
        )
        return

    text = (
        "–ü–æ–¥–ø–∏—Å–∫–∞ –î–æ–±—Ä—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ—á–∫–∏+ ü´∂\n\n"
        "- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–∫\n"
        "- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π\n"
        "- –î–æ—Å—Ç—É–ø –∫ ¬´–¶–∏—Ç–∞—Ç–µ –¥–Ω—è¬ª\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ/–º–µ—Å"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy:30:500")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_edit_sub")]
    ])
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "subscription")
async def subscription_callback(call: CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏–∑ inline-–∫–Ω–æ–ø–∫–∏ ‚Äî
    —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    await call.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª

    user_id = call.from_user.id

    if await is_subscribed(user_id):
        record = await fetch_subscription(user_id)
        expires = record['expires_at']
        formatted = expires.strftime("%d.%m.%Y")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_sub")]
        ])
        await call.message.edit_text(
            f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {formatted}.",
            reply_markup=kb
        )
    else:
        text = (
            "–ü–æ–¥–ø–∏—Å–∫–∞ –î–æ–±—Ä—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ—á–∫–∏+ ü´∂\n\n"
            "- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–∫\n"
            "- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π\n"
            "- –î–æ—Å—Ç—É–ø –∫ ¬´–¶–∏—Ç–∞—Ç–µ –¥–Ω—è¬ª\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ/–º–µ—Å"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy:30:500")],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_edit_sub")]
        ])
        await call.message.edit_text(text, reply_markup=kb)


@router.callback_query(F.data.startswith("buy:"))
async def purchase_callback(call: CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
    """
    _, days_str, amount = call.data.split(':')
    days = int(days_str)
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π"

    url, payment_id = await create_payment(call.from_user.id, amount, description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check:{payment_id}:{days}")]
    ])

    await call.message.edit_text(
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )
    await call.answer()


@router.callback_query(F.data.startswith("check:"))
async def check_callback(call: CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏, –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
    —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
    """
    _, payment_id, days_str = call.data.split(':')
    days = int(days_str)
    status = await check_payment_status(payment_id)

    if status == 'succeeded':
        expires = await activate_subscription(call.from_user.id, days)
        formatted = expires.strftime("%d.%m.%Y")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_sub")]
        ])
        await call.message.edit_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {formatted}.",
            reply_markup=kb
        )
    else:
        await call.answer(
            f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}.",
            show_alert=True
        )
    await call.answer()


@router.callback_query(F.data == "main_menu_sub")
async def back_to_main(call: CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()
    await call.message.answer(START_TEXT, reply_markup=get_main_menu_kb())


@router.callback_query(F.data == "main_menu_edit_sub")
async def back_to_main_edit(call: CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()
    await call.message.edit_text(START_TEXT, reply_markup=get_main_menu_kb())


def register_subscription(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ."""
    dp.include_router(router)
